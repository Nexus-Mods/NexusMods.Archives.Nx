NexusMods.Archives.Nx.Packing.NxUnpackerBuilder.AddFilesWithArrayOutput(NexusMods.Archives.Nx.Packing.Unpack.PathedFileEntry![]! files, out NexusMods.Archives.Nx.FileProviders.OutputArrayProvider![]! results) -> NexusMods.Archives.Nx.Packing.NxUnpackerBuilder!
NexusMods.Archives.Nx.Packing.NxUnpackerBuilder.AddFilesWithDiskOutput(NexusMods.Archives.Nx.Packing.Unpack.PathedFileEntry![]! files, string! outputFolder) -> NexusMods.Archives.Nx.Packing.NxUnpackerBuilder!
NexusMods.Archives.Nx.Packing.NxUnpackerBuilder.GetPathedFileEntries() -> NexusMods.Archives.Nx.Packing.Unpack.PathedFileEntry![]!
NexusMods.Archives.Nx.Packing.NxUnpackerBuilder.Unpacker.get -> NexusMods.Archives.Nx.Packing.Unpack.NxUnpacker!
NexusMods.Archives.Nx.Packing.Pack.NxPacker
NexusMods.Archives.Nx.Packing.Pack.NxRepacker
NexusMods.Archives.Nx.Packing.Pack.NxRepacker.NxRepacker() -> void
NexusMods.Archives.Nx.Packing.Unpack.NxUnpacker
NexusMods.Archives.Nx.Packing.Unpack.NxUnpacker.ExtractFiles(NexusMods.Archives.Nx.Interfaces.IOutputDataProvider![]! outputs, NexusMods.Archives.Nx.Structs.UnpackerSettings! settings) -> void
NexusMods.Archives.Nx.Packing.Unpack.NxUnpacker.ExtractFilesInMemory(System.Span<NexusMods.Archives.Nx.Headers.Managed.FileEntry> files, NexusMods.Archives.Nx.Structs.UnpackerSettings! settings) -> NexusMods.Archives.Nx.FileProviders.OutputArrayProvider![]!
NexusMods.Archives.Nx.Packing.Unpack.NxUnpacker.ExtractFilesToDisk(System.Span<NexusMods.Archives.Nx.Headers.Managed.FileEntry> files, string! outputFolder, NexusMods.Archives.Nx.Structs.UnpackerSettings! settings) -> NexusMods.Archives.Nx.FileProviders.OutputFileProvider![]!
NexusMods.Archives.Nx.Packing.Unpack.NxUnpacker.GetFileEntriesRaw() -> System.Span<NexusMods.Archives.Nx.Headers.Managed.FileEntry>
NexusMods.Archives.Nx.Packing.Unpack.NxUnpacker.GetFilePath(NexusMods.Archives.Nx.Headers.Managed.FileEntry entry) -> string!
NexusMods.Archives.Nx.Packing.Unpack.NxUnpacker.GetPathedFileEntries() -> NexusMods.Archives.Nx.Packing.Unpack.PathedFileEntry![]!
NexusMods.Archives.Nx.Packing.Unpack.NxUnpacker.MakeArrayOutputProviders(System.Span<NexusMods.Archives.Nx.Headers.Managed.FileEntry> files) -> NexusMods.Archives.Nx.FileProviders.OutputArrayProvider![]!
NexusMods.Archives.Nx.Packing.Unpack.NxUnpacker.MakeDiskOutputProviders(System.Span<NexusMods.Archives.Nx.Headers.Managed.FileEntry> files, string! outputFolder) -> NexusMods.Archives.Nx.FileProviders.OutputFileProvider![]!
NexusMods.Archives.Nx.Packing.Unpack.NxUnpacker.NxUnpacker(NexusMods.Archives.Nx.Interfaces.IFileDataProvider! provider, bool hasLotsOfFiles = false) -> void
NexusMods.Archives.Nx.Packing.Unpack.PathedFileEntry
NexusMods.Archives.Nx.Packing.Unpack.PathedFileEntry.Entry.get -> NexusMods.Archives.Nx.Headers.Managed.FileEntry
NexusMods.Archives.Nx.Packing.Unpack.PathedFileEntry.Entry.init -> void
NexusMods.Archives.Nx.Packing.Unpack.PathedFileEntry.FileName.get -> string!
NexusMods.Archives.Nx.Packing.Unpack.PathedFileEntry.FileName.init -> void
NexusMods.Archives.Nx.Packing.Unpack.PathedFileEntry.PathedFileEntry() -> void
static NexusMods.Archives.Nx.Packing.Pack.NxPacker.Pack(NexusMods.Archives.Nx.Structs.PackerFile![]! files, NexusMods.Archives.Nx.Structs.PackerSettings! settings) -> void